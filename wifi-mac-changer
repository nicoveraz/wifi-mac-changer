
#!/bin/zsh

# Function to display usage information
usage() {
    echo "Usage: sudo wifi-mac-changer [-m \"00:11:22:33:44:55\" | -r] [-n \"computername\"] [-w seconds]"
    echo "  -m    Target MAC address (format: xx:xx:xx:xx:xx:xx or xx-xx-xx-xx-xx-xx)"
    echo "  -r    Use a random MAC address"
    echo "  -n    Set a temporary computer name for Wi-Fi (optional)"
    echo "  -w    Wait time in seconds between steps (default: 2)"
    echo "  -h    Display this help message"
    exit 1
}

# Function to generate a random MAC address
generate_random_mac() {
    local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    local first_byte=$(echo $mac | cut -d':' -f1)
    local first_byte_dec=$((16#$first_byte))
    if [ $((first_byte_dec % 2)) -ne 0 ]; then
        first_byte_dec=$((first_byte_dec - 1))
    fi
    local new_first_byte=$(printf "%02x" $first_byte_dec)
    echo "${new_first_byte}${mac:2}"
}

# Function to validate and sanitize MAC address
sanitize_mac() {
    local mac=$1
    mac=$(echo $mac | tr -cd '[:xdigit:]:-')
    mac=${mac//-/:}
    if [[ $mac =~ ^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$ ]]; then
        local first_byte=$(echo $mac | cut -d':' -f1)
        local first_byte_dec=$((16#$first_byte))
        if [ $((first_byte_dec % 2)) -ne 0 ]; then
            first_byte_dec=$((first_byte_dec - 1))
        fi
        local new_first_byte=$(printf "%02x" $first_byte_dec)
        echo "${new_first_byte}${mac:2}"
        return 0
    else
        echo "Invalid MAC address format" >&2
        return 1
    fi
}

# Function to set temporary computer name
set_temp_computer_name() {
    if [ ! -z "$1" ]; then
        echo "Setting temporary computer name to $1..."
        ORIGINAL_COMPUTER_NAME=$(scutil --get ComputerName)
        ORIGINAL_LOCAL_HOSTNAME=$(scutil --get LocalHostName)
        ORIGINAL_HOSTNAME=$(scutil --get HostName)
        sudo scutil --set ComputerName "$1"
        sudo scutil --set LocalHostName "$1"
        sudo scutil --set HostName "$1"
        echo "Temporary computer name set to $1."
    fi
}

# Function to revert computer name
revert_computer_name() {
    if [ ! -z "$ORIGINAL_COMPUTER_NAME" ]; then
        echo "Reverting computer name..."
        sudo scutil --set ComputerName "$ORIGINAL_COMPUTER_NAME"
        sudo scutil --set LocalHostName "$ORIGINAL_LOCAL_HOSTNAME"
        sudo scutil --set HostName "$ORIGINAL_HOSTNAME"
        echo "Computer name reverted to original."
    fi
}

# Parse command line arguments
WAIT_TIME=2
while getopts ":m:rn:w:h" opt; do
    case ${opt} in
        m )
            TARGET_MAC_ADDRESS=$(sanitize_mac "$OPTARG")
            if [ $? -ne 0 ]; then
                exit 1
            fi
            ;;
        r )
            RANDOM_MAC=$(generate_random_mac)
            TARGET_MAC_ADDRESS=$(sanitize_mac "$RANDOM_MAC")
            if [ $? -ne 0 ]; then
                echo "Error generating random MAC address" >&2
                exit 1
            fi
            echo "Generated random MAC address: $TARGET_MAC_ADDRESS"
            ;;
        n )
            TEMP_COMPUTER_NAME=$OPTARG
            ;;
        w )
            WAIT_TIME=$OPTARG
            ;;
        h )
            usage
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&2
            usage
            ;;
        : )
            echo "Invalid option: $OPTARG requires an argument" 1>&2
            usage
            ;;
    esac
done
shift $((OPTIND -1))

# Check if TARGET_MAC_ADDRESS is provided
if [ -z "${TARGET_MAC_ADDRESS}" ]; then
    echo "Error: Missing required MAC address" 1>&2
    usage
fi

# Set temporary computer name if provided
set_temp_computer_name "$TEMP_COMPUTER_NAME"

# Main script logic
echo "Changing MAC address to ${TARGET_MAC_ADDRESS}..."
echo "Wait time between steps: ${WAIT_TIME} seconds"

# Turn off Wi-Fi
echo "Turning Wi-Fi off..."
sudo networksetup -setairportpower en0 off
sleep $WAIT_TIME

# Turn on Wi-Fi
echo "Turning Wi-Fi on..."
sudo networksetup -setairportpower en0 on
sleep $WAIT_TIME

# Change MAC address
echo "Changing MAC address..."
sudo ifconfig en0 ether "${TARGET_MAC_ADDRESS}"
sleep $WAIT_TIME

# Restart networking services
echo "Restarting networking services..."
sudo killall mDNSResponder
sudo killall mDNSResponderHelper
sudo dscacheutil -flushcache

echo "Operation completed. MAC address changed to ${TARGET_MAC_ADDRESS}."
if [ ! -z "$TEMP_COMPUTER_NAME" ]; then
    echo "Temporary computer name set to $TEMP_COMPUTER_NAME."
fi
echo "You can now manually connect to your desired Wi-Fi network."
echo "To revert the computer name, run this script again with the -n option omitted."

# Trap to catch script exit and revert computer name
trap revert_computer_name EXIT